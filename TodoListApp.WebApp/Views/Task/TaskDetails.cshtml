@using Microsoft.AspNetCore.Mvc.TagHelpers
@using TodoListApp.WebApi.Models
@model TaskDetailsViewModel

<div class="card">
    <div class="card-header">
        <h2>@Model.SelectedTask.Title</h2>
    </div>
    <div class="card-body">
        <p>Description: @Model.SelectedTask.Description</p>
        <p>Status: @(Model.SelectedTask.Status.ToString())</p>
        <p>Created At: @(Model.SelectedTask.CreatedDate == DateTime.MinValue ? "Date not set" : Model.SelectedTask.CreatedDate.ToString("yyyy-MM-dd HH:mm:ss"))</p>

        @if (Model.SelectedTask.DueDate.HasValue)
        {
            <p>Due Date: @Model.SelectedTask.DueDate.Value.ToString("yyyy-MM-dd HH:mm:ss")</p>
        }
        @if (Model.Tags != null && Model.Tags.Any())
        {
            <div class="mt-3 d-flex align-items-center">
                <h4 class="me-2">Tags:</h4>
                <ul class="list-inline">
                    @for (int i = 0; i < Model.Tags.Count; i++)
                    {
                        var tag = Model.Tags[i];
                        var badgeClass = $"bg-custom-{(i % 7) + 1} text-white"; // Cycle through 7 custom colors and add text color
                        <li class="list-inline-item">
                            <a asp-controller="Tag" asp-action="TasksByTag" asp-route-tagText="@tag.Text" class="text-decoration-none">
                                <span class="badge @badgeClass">@tag.Text</span>
                            </a>
                        </li>
                    }
                </ul>
            </div>
        }
        <p>Is Completed: @Model.SelectedTask.IsCompleted</p>
        <p>Todo List: @Model.TodoList.Name</p>

        <div class="d-flex justify-content-between align-items-center">
            @if (TempData["ShowBackToTasksLink"] != null && (bool)TempData["ShowBackToTasksLink"])
            {
                <a href="@(ViewData["ReturnUrl"] ?? Url.Action("Index", "TodoList"))" class="btn btn-secondary">Back to Tasks</a>
            }
            else
            {
                @await Component.InvokeAsync("BackButton")
            }
        </div>
    </div>
</div>